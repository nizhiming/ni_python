

20170622:模板



20170622:网站架构：
1、创建网站的实例；
2、使用django web架构；
3、下载django工具包；

20170622:创建一个项目：
1、解压到Python安装目录下，在cmd里进入Django所在的目录，运行python setup.py install，然后开始安装，Django将要被安装到Python的Lib下site-packages；
2、把django-admin.py拷贝到到建web的目录下；
3、cmd进入到要建web工程的目录下使用：Python django-admin.py ni_Web 创建ni_Web项目；
4、创建完成后我们可以查看下项目的目录结构：
	$ cd HelloWorld/
	$ tree
	.
	|-- HelloWorld
	|   |-- __init__.py
	|   |-- settings.py
	|   |-- urls.py
	|   `-- wsgi.py
	`-- manage.py
	目录说明：
	HelloWorld: 项目的容器。
	manage.py: 一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互。
	HelloWorld/__init__.py: 一个空文件，告诉 Python 该目录是一个 Python 包。
	HelloWorld/settings.py: 该 Django 项目的设置/配置。
	HelloWorld/urls.py: 该 Django 项目的 URL 声明; 一份由 Django 驱动的网站"目录"。
	HelloWorld/wsgi.py: 一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目。
5、接下来我们进入 HelloWorld 目录输入以下命令，启动服务器：
	python manage.py runserver 0.0.0.0:8000
	0.0.0.0 让其它电脑可连接到开发服务器，8000 为端口号。如果不说明，那么端口号默认为 8000。
	在浏览器输入你服务器的ip及端口号，如果正常启动，输出结果如下：It Work!
6、视图和 URL 配置
	在先前创建的 HelloWorld 目录下的 HelloWorld 目录新建一个 view.py 文件，并输入代码：
	HelloWorld/HelloWorld/view.py 文件代码：
	from django.http import HttpResponse
 
	def hello(request):
		return HttpResponse("Hello world ! ")
	接着，绑定 URL 与视图函数。打开 urls.py 文件，删除原来代码，将以下代码复制粘贴到 urls.py 文件中：
	HelloWorld/HelloWorld/urls.py 文件代码：
	from django.conf.urls import url
 
	from . import view
 
	urlpatterns = [
		url(r'^$', view.hello),
	]
	整个目录结构如下：
	$ tree
	.
	|-- HelloWorld
	|   |-- __init__.py
	|   |-- __init__.pyc
	|   |-- settings.py
	|   |-- settings.pyc
	|   |-- urls.py              # url 配置
	|   |-- urls.pyc
	|   |-- view.py              # 添加的视图文件
	|   |-- view.pyc             # 编译后的视图文件
	|   |-- wsgi.py
	|   `-- wsgi.pyc
	`-- manage.py
	完成后，启动 Django 开发服务器，并在浏览器访问打开浏览器并访问：ni_Web
7、url() 函数
	Django url() 可以接收四个参数，分别是两个必选参数：regex、view 和两个可选参数：kwargs、name，接下来详细介绍这四个参数。
		regex: 正则表达式，与之匹配的 URL 会执行对应的第二个参数 view。
		view: 用于执行与正则表达式匹配的 URL 请求。
		kwargs: 视图使用的字典类型的参数。
		name: 用来反向获取 URL。